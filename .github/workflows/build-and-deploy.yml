name: Build and Deploy

on:
  push:
    branches:
      - main

jobs:
  check-submodule-status:
    name: Check Submodule CI Status by Commit SHA
    runs-on: ubuntu-latest
    outputs:
      ready: ${{ steps.check.outputs.ready }}
      build_matrix: ${{ steps.check.outputs.build_matrix }}
    steps:
      - name: Checkout repo with submodules
        uses: actions/checkout@v3
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Check submodule workflow status & build matrix
        id: check
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e

          declare -A REPO_MAP=(
            [whale-sentinel-common-attack-detection]=common-attack-detection
            [whale-sentinel-configuration-service]=configuration-service
            [whale-sentinel-dga-detection]=dga-detection
            [whale-sentinel-gateway-service]=gateway-service
            [whale-sentinel-web-attack-detection]=web-attack-detection
          )

          ALL_SUCCESS=true
          MATRIX_INCLUDE=()

          for DIR in "${!REPO_MAP[@]}"; do
            echo "\nüîç Checking submodule $DIR"

            # Get commit SHA from main repo
            SHA=$(git ls-tree HEAD $DIR | awk '{print $3}')
            echo "üßæ Commit SHA from main repo: $SHA"

            # Check commit message from main repo for submodule SHA
            COMMIT_MSG=$(git log -1 --pretty=%B $SHA)
            if [[ "$COMMIT_MSG" =~ Release:[[:space:]]*([0-9a-zA-Z.-]+) ]]; then
              VERSION="${BASH_REMATCH[1]}"
              echo "‚úÖ Found release version: $VERSION"
            else
              echo "‚ö†Ô∏è No Release: found in commit message. Skipping build."
              continue
            fi

            # Check CI status from submodule repo using commit SHA
            API="https://api.github.com/repos/YangYang-Research/$DIR/actions/runs?per_page=10"
            STATUS=$(curl -s -H "Authorization: token $GH_TOKEN" "$API" \
              | jq -r --arg sha "$SHA" '.workflow_runs[] | select(.head_sha == $sha) | .conclusion' | head -n 1)

            echo "üü¢ Status for $DIR: $STATUS"

            if [[ "$STATUS" != "success" ]]; then
              echo "‚ùå CI not successful for $DIR"
              ALL_SUCCESS=false
            else
              MATRIX_INCLUDE+=("{\"name\":\"${DIR}\",\"version\":\"${VERSION}\"}")
            fi
          done

          echo "ready=$ALL_SUCCESS" >> $GITHUB_OUTPUT

          MATRIX_JSON=$(printf '[%s]' "$(IFS=,; echo "${MATRIX_INCLUDE[*]}")")
          echo "build_matrix=$MATRIX_JSON" >> $GITHUB_OUTPUT

  build-and-push:
    name: Build and Push Docker Images
    needs: check-submodule-status
    if: needs.check-submodule-status.outputs.ready == 'true' && needs.check-submodule-status.outputs.build_matrix != '[]'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include: ${{ fromJson(needs.check-submodule-status.outputs.build_matrix) }}
    steps:
      - name: Checkout source
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Log in to Amazon ECR Public
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: public

      - name: Build and Push Docker Image
        env:
          IMAGE_NAME: public.ecr.aws/j8d4r7c5/whale-sentinel/whale-sentinel-services/${{ matrix.name }}
          VERSION: ${{ matrix.version }}
        run: |
          echo "üîß Building $IMAGE_NAME with tags: $VERSION, latest"
          docker build -t "$IMAGE_NAME:$VERSION" -t "$IMAGE_NAME:latest" "${{ matrix.name }}"

          echo "üì¶ Pushing $IMAGE_NAME:$VERSION"
          if ! docker manifest inspect "$IMAGE_NAME:$VERSION" > /dev/null 2>&1; then
            docker push "$IMAGE_NAME:$VERSION"
            docker push "$IMAGE_NAME:latest"
          else
            echo "‚è© Image $IMAGE_NAME:$VERSION already exists. Skipping push."
          fi
