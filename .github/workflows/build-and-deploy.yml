name: Build & Push Docker Images on PR Merge

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  build-and-push:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Extract version from PR description
      id: extract_version
      run: |
        DESCRIPTION="${{ github.event.pull_request.body }}"
        VERSION=$(echo "$DESCRIPTION" | grep -i '^Version:' | sed -E 's/Version:\s*//i')
        if [[ -z "$VERSION" ]]; then
          echo "‚ùå No 'Version:' tag found in PR description."
          exit 1
        fi
        echo "VERSION_TAG=$VERSION" >> $GITHUB_ENV
        echo "‚úÖ Found version: $VERSION"

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR Public
      uses: aws-actions/amazon-ecr-login@v2
      with:
        registry-type: public

    - name: Get changed submodules from dev to main
      id: changed
      run: |
        git fetch origin dev
        echo "CHANGED_DIRS=$(git diff --name-only origin/main...origin/dev | grep '^whale-sentinel-' | cut -d/ -f1 | sort -u | xargs)" >> $GITHUB_ENV

    - name: Build & Push Docker Images (only if version tag does not exist)
      run: |
        for dir in $CHANGED_DIRS; do
          IMAGE_NAME="public.ecr.aws/YOUR_ECR_ALIAS/$dir"
          echo "üîç Checking if $IMAGE_NAME:${VERSION_TAG} already exists..."

          EXISTS=$(aws ecr-public describe-images \
            --repository-name "$dir" \
            --image-ids imageTag=$VERSION_TAG \
            --region us-east-1 \
            --query 'imageDetails' \
            --output text || true)

          if [[ -n "$EXISTS" ]]; then
            echo "‚úÖ Image $IMAGE_NAME:${VERSION_TAG} already exists. Skipping build and push."
          else
            echo "üöÄ Building and pushing $IMAGE_NAME:${VERSION_TAG} and :latest"
            docker build -t $IMAGE_NAME:latest -t $IMAGE_NAME:${VERSION_TAG} ./$dir
            docker push $IMAGE_NAME:latest
            docker push $IMAGE_NAME:${VERSION_TAG}
          fi
        done
