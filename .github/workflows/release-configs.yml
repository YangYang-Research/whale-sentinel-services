name: Release Configs

on:
  push:
    branches:
      - main

jobs:
  check-release-version:
    name: Check for "Release:" in commit message
    runs-on: ubuntu-latest
    outputs:
      should_proceed: ${{ steps.check.outputs.should_proceed }}
      release_version: ${{ steps.extract_version.outputs.release_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Check commit message
        id: check
        run: |
          echo "üîç Checking last commit message..."

          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "üìù Commit message: $COMMIT_MSG"

          if echo "$COMMIT_MSG" | grep -q "Release:"; then
            echo "‚úÖ Found 'Release:' in commit message."
            echo "should_proceed=true" >> $GITHUB_OUTPUT
          else
            echo "‚õî No 'Release:' found. Skipping workflow."
            echo "should_proceed=false" >> $GITHUB_OUTPUT
          fi

      - name: Extract Release Version
        id: extract_version
        run: |
          RELEASE_VERSION=$(echo "$COMMIT_MSG" | grep -o "Release:[^ ]*" | sed 's/Release://g')
          echo "Detected Release Version: $RELEASE_VERSION"
          echo "release_version=$RELEASE_VERSION" >> $GITHUB_OUTPUT

  release:
    name: Package and Upload Configs
    runs-on: ubuntu-latest
    needs: check-release-version
    if: needs.check-release-version.outputs.should_proceed == 'true'
    env:
      RELEASE_FILE: whale-sentinel-configs-${{ needs.check-release-version.outputs.release_version }}.zip

    steps:
      - uses: actions/checkout@v4

      - name: Zip config files
        run: |
          zip -r "$RELEASE_FILE" fluent-bit redis
          ls -lh "$RELEASE_FILE"

      - name: Check release file
        run: |
          if [ -f "$RELEASE_FILE" ]; then
            echo "‚úÖ File exists"
          else
            echo "‚ùå File not found"
            exit 1
          fi

      - name: Upload artifact for download
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.RELEASE_FILE }}
          path: ${{ env.RELEASE_FILE }}
